<?php

/**
 * @file
 * Adds URL Redirect and UI to set paths to redirect.
 */
use Drupal\user\Entity\User;
use Symfony\Component\HttpFoundation\RedirectResponse;
use Drupal\Component\Utility\Html;

function url_redirect_help($section) {
    $output = '';
    switch ($section) {
        case 'help.page.url_redirect':
            $output = '<p>'. '<b>' . t('About') . '</b>'. '</p>';
            $output .= '<ul>';
            $output .= '<li>' . t('  Url Redirect is a simple, flexible module for allowing user(s) / role(s) to redirect from one path to other.') . '</li>';
            $output .= '<li>' . t('  Url Redirect is also handy to add / edit / delete url(s) , specify role(s) / user(s) for url
                                  redirect, set a message for url redirect, enable / disable') . '</li>';
            $output .= '<li>' . t('  For more  info visit <a href="@link">here</a>.', array('@link' => 'https://www.drupal.org/project/url_redirect')) . '</li>';
            $output .= '</ul>';
            break;
    }
    return $output;
}
/**
 * Implements hook_page_attachments().
 */
function url_redirect_page_attachments(array &$page) {
  global $base_url;
  $user = \Drupal::currentUser();
  // Load path matcher service.
  $wild_path_matcher = \Drupal::service('path.matcher');
  // Get wildcards list.
  $wildcard_list = url_redirect_get_wildcards();
  $current_path = HTML::escape(\Drupal::service('path.current')->getPath());
  // check for path matcher.
  $match = '';
  foreach($wildcard_list as $list){
    $match = $wild_path_matcher->matchPath(substr($current_path, 1), $list);
    if(empty($match)){
      $match = $wild_path_matcher->matchPath($current_path, $list);
    }
    // if pattern and wildcard matches, then break loop.
    if($match){
      break;
    }
  }
  if($match){
    $path_check = url_redirect_path_check($list);
  }
  // Check URL path in url_redirect table.
  else if (\Drupal::service('path.matcher')->isFrontPage()) {
    $path = "<front>";
    $path_check = url_redirect_path_check($path);
  }
  else {
    $path = HTML::escape(\Drupal::service('path.current')->getPath());
    $path_check = url_redirect_path_check(substr($path, 1));
    if(empty($path_check)){
      $path_check = url_redirect_path_check($path);
    }
  }
  if ($path_check) {
    $check_for = $path_check['check_for'];
    $message = $path_check['message'];
    if ($message == 'Yes') {
      drupal_set_message(t("You have been redirected to '@link_path'.", array('@link_path' => $path_check['redirect_path'])),'status');
    }

    // Check for Role.
    if ($check_for == 'Role') {
      $role_check = (array) json_decode($path_check['roles']);
      $role_check_array = array_keys($role_check);
      $user_role_check_array = $user->getRoles();
      $checked_result = array_intersect($role_check_array, $user_role_check_array);
      if ($checked_result) {
        if(($path_check['redirect_path'] == '<front>') || ($path_check['redirect_path'] == '&lt;front&gt;')){
          url_redirect_redirect($base_url);
        }
        else{
          url_redirect_redirect($base_url.'/'.$path_check['redirect_path']);
        }
      }
    }

    // Check for User.
    elseif ($check_for == 'User') {
      $user_check = (array) json_decode($path_check['users']);
      $user_check_array = array_keys($user_check);
      $uid = array($user->id());
      $checked_user_result = array_intersect($user_check_array, $uid);
      if ($checked_user_result) {
        if(($path_check['redirect_path'] == '<front>') || ($path_check['redirect_path'] == '&lt;front&gt;')){
          url_redirect_redirect($base_url);
        }
        else{
          url_redirect_redirect($base_url.'/'.$path_check['redirect_path']);
        }
      }
    }
  }
}

/**
 * Fetch list of all the users.
 */
function url_redirect_user_fetch() {

  $ids = \Drupal::entityQuery('user')
    ->condition('uid', 0, '!=')
    ->execute();
  $users = User::loadMultiple($ids);

  foreach ($users as $id => $user_object) {
    $result[$id] = $user_object->get('mail')->value;
  }
  return $result;
}

/**
 * Checking the path.
 */
function url_redirect_path_check($path) {
  $connection = \Drupal::database();
  $query = $connection->select('url_redirect', 'u')
    ->fields('u')
    ->condition('path', $path, '=')
    ->condition('status', 1, '=');
  $result = $query->execute()->fetchAssoc();
  return $result;
}

/**
 * Edit the path.
 */
function url_redirect_path_edit($path) {
  $connection = \Drupal::database();
  $query = $connection->select('url_redirect', 'u')
    ->fields('u')
    ->condition('path', $path, '=');
  $result = $query->execute()->fetchAssoc();
  return $result;
}

/**
 * Redirect path.
 */
function url_redirect_redirect($path) {
  $response = new RedirectResponse($path);
  $response->send();
  exit;
}

/**
 * Get Wildcard path(s).
 */
function url_redirect_get_wildcards() {
  $wildcards = array();
  $connection = \Drupal::database();
  $query = $connection->select('url_redirect', 'u');
  $query->fields('u', ['path']);
  $query->condition('path', '%' . '/*' . '%', 'LIKE');
  $results = $query->execute()->fetchAll();
  foreach ($results as $result) {
    $wildcards[] = $result->path;
  }
  return $wildcards;
}
